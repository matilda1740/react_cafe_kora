{"ast":null,"code":"import { db } from './firebase';\nexport const initialState = {\n  users: [],\n  products: []\n};\nexport const reducer = (prevState = initialState, action) => {\n  const customersRef = db.collection('user');\n  const productsRef = db.collection('product');\n\n  switch (action.type) {\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n      console.log(action);\n\n      try {\n        productsRef // .where(\"product_id\", \"==\", `${action.targetID}`)\n        // .get()\n        // .then( snapshot => {\n        //     snapshot.forEach( item => {\n        //         productsRef.doc(item.id).delete() \n        //     })\n        // })\n        .onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            console.log(item);\n          });\n        }); // .then( () => {\n        //     let prodIndex = copyProducts.findIndex( product => product.product_id === action.targetID)                     \n        //     if (prodIndex >= 0) {\n        //         return copyProducts.splice(prodIndex, 1);\n        //     } \n        // })\n        // .catch(error => console.log(\"Deletion Error: \", error))   \n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: [...copyProducts]\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts // products: [...fetchedProducts],\n\n      };\n\n    case \"fetch_user_details\":\n      let copyUsers = [...prevState.users];\n      let selectedUser;\n      customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n        snapshot.forEach(user => {\n          selectedUser = user.data();\n          return selectedUser;\n        });\n      }).catch(error => console.log(\"Update Error: \", error));\n      console.log(action, selectedUser);\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    default:\n      return prevState;\n  } // return prevState;\n\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","initialState","users","products","reducer","prevState","action","customersRef","collection","productsRef","type","copyProducts","console","log","onSnapshot","snapshot","docChanges","forEach","item","error","fetchedProducts","length","push","doc","data","itemExists","findIndex","product","product_id","copyUsers","selectedUser","where","targetID","get","then","user","catch"],"mappings":"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","sourcesContent":["\nimport { db } from './firebase'\n\nexport const initialState = {\n    users: [],\n    products: []\n\n};\n\n\nexport const reducer = (prevState = initialState, action) => {\n    const customersRef = db.collection('user')\n    const productsRef = db.collection('product')\n\n    switch(action.type) {\n\n        case \"delete_product\" :\n            let copyProducts =  [...prevState.products];\n            console.log(action)\n            try{ \n                productsRef\n                    // .where(\"product_id\", \"==\", `${action.targetID}`)\n                    // .get()\n                    // .then( snapshot => {\n                    //     snapshot.forEach( item => {\n                    //         productsRef.doc(item.id).delete() \n                    //     })\n                    // })\n                    .onSnapshot((snapshot) => {\n                        snapshot.docChanges().forEach(item => {\n                            console.log(item)\n                        })\n                    })\n                    // .then( () => {\n                    //     let prodIndex = copyProducts.findIndex( product => product.product_id === action.targetID)                     \n                    //     if (prodIndex >= 0) {\n                    //         return copyProducts.splice(prodIndex, 1);\n                    //     } \n                    // })\n                    // .catch(error => console.log(\"Deletion Error: \", error))   \n                    \n                    \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: [...copyProducts]                \n            }\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n                // products: [...fetchedProducts],\n            }\n\n        case \"fetch_user_details\":\n            let copyUsers = [...prevState.users]\n\n            let selectedUser;\n            customersRef\n                .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            selectedUser = user.data()\n                            return selectedUser\n                        })\n                    })\n                    .catch( (error) => console.log(\"Update Error: \", error))\n            console.log(action, selectedUser)\n            return{\n                ...prevState,\n                users: copyUsers,\n            }\n\n\n        default: \n            return prevState;\n    }\n            // return prevState;\n\n}\n\n"]},"metadata":{},"sourceType":"module"}