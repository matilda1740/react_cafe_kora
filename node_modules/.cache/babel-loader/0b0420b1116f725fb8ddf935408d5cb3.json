{"ast":null,"code":"import { db, storage, time } from './firebase';\nconst customersRef = db.collection('user');\nconst productsRef = db.collection('product');\nconst ordersRef = db.collection('orders');\nexport const initialState = {\n  users: [],\n  products: [],\n  cart: []\n};\nexport const getSubTotal = cart => {\n  return cart === null || cart === void 0 ? void 0 : cart.reduce((amount, item) => item.quantity > 1 ? amount += parseInt(item.price * item.quantity) : amount += parseInt(item.price), 0);\n};\nexport const reducer = (prevState = initialState, action) => {\n  switch (action.type) {\n    //USER OPERATIONS\n    case \"fetch_users\":\n      let fetchedUsers = [...prevState.users]; // console.log(\"Fetch Users Action: \", action)\n\n      try {\n        customersRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedUsers.length === 0) {\n              fetchedUsers.push(item.doc.data());\n            } else {\n              let itemExists = fetchedUsers.findIndex(users => users.userID === item.doc.data().userID);\n\n              if (itemExists < 0) {\n                fetchedUsers.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        users: fetchedUsers\n      };\n\n    case \"delete_user\":\n      let copyUsers = [...prevState.users]; // console.log(\"Delete User Action: \", action)\n\n      try {\n        customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(user => {\n            if (action.targetID) {\n              customersRef.doc(user.id).delete();\n              let userIndex = copyUsers.findIndex(current => current.userID === user.data().userID);\n\n              if (userIndex >= 0) {\n                copyUsers.splice(userIndex, 1);\n              }\n            }\n          });\n        }).catch(error => console.log(\"Deletion Error: \", error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    case \"update_user\":\n      let updatedUser = [...prevState.users];\n      console.log(\"Update User: \", action);\n      return { ...prevState,\n        users: [...updatedUser]\n      };\n    //PRODUCT OPERATIONS\n\n    case \"add_product\":\n      let addProduct = [...prevState.products];\n      console.log(\"Add Action: \", action);\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.add({\n              product_id: productsRef.doc().id,\n              product_name: product_name,\n              product_descr: product_descr,\n              product_image: url,\n              product_price: product_price,\n              product_cat: product_cat,\n              dateadded: time\n            });\n          }).catch(error => console.log(\"Error Adding Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Error Updating Storage: \", error);\n      }\n\n      return { ...prevState,\n        products: [...addProduct]\n      };\n\n    case \"update_product_info\":\n      let updateProducts = [...prevState.products];\n      console.log(\"Update Action: \", action);\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n              snapshot.forEach(item => {\n                productsRef.doc(item.id).set({\n                  product_id: productsRef.doc().id,\n                  product_name: product_name,\n                  product_descr: product_descr,\n                  product_image: url,\n                  product_price: product_price,\n                  product_cat: product_cat,\n                  dateadded: time\n                }, {\n                  merge: true\n                });\n              });\n            });\n          }).catch(error => console.log(\"Error Adding Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Update Error: \", error);\n      }\n\n      return { ...prevState,\n        products: updateProducts\n      };\n\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            productsRef.doc(item.id).delete();\n            let prodIndex = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n\n            if (prodIndex >= 0) {\n              copyProducts.splice(prodIndex, 1);\n            }\n          });\n        });\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: copyProducts\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.orderBy('product_name', 'asc').onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts\n      };\n    //CART OPERATIONS  \n\n    case \"add_to_cart\":\n      let addedCart = [...prevState.cart];\n      console.log(\"Add To Cart Action: \", action);\n\n      try {\n        let itemExists = addedCart.find(product => product.product_id === action.item.product_id);\n\n        if (!itemExists) {\n          addedCart.push({ ...action.item,\n            quantity: 1\n          });\n        }\n      } catch (error) {\n        console.log(\"Error Adding Item To Cart: \", error);\n      }\n\n      return { ...prevState,\n        cart: addedCart\n      };\n\n    case \"increase_qty\":\n      let increasedCart = [...prevState.cart];\n      console.log(\"Increase Qty Action: \", action);\n\n      try {\n        let productId = increasedCart.find(product => product.product_id === action.item.product_id);\n        productId ? productId.quantity = parseInt(productId.quantity) + 1 : console.log(\"error\", productId);\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        cart: increasedCart\n      };\n\n    case \"decrease_qty\":\n      let currentCartCopy = [...prevState.cart];\n\n      try {\n        let itemExists = currentCartCopy.find(product => product.product_id === action.item.product_id);\n        itemExists.quantity <= 1 ? currentCartCopy.splice(prevState.cart.findIndex(item => item.id === action.item.product_id), 1) : itemExists.quantity = parseInt(itemExists.quantity) - 1;\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        cart: currentCartCopy\n      };\n\n    case \"fetch_cart\":\n      let fetchedCart = [...prevState.cart];\n      console.log(\"Fetch Cart Action: \", action);\n      return { ...prevState,\n        cart: fetchedCart\n      };\n\n    default:\n      return prevState;\n  }\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","storage","time","customersRef","collection","productsRef","ordersRef","initialState","users","products","cart","getSubTotal","reduce","amount","item","quantity","parseInt","price","reducer","prevState","action","type","fetchedUsers","onSnapshot","snapshot","docChanges","forEach","length","push","doc","data","itemExists","findIndex","userID","error","console","log","copyUsers","where","targetID","get","then","user","id","delete","userIndex","current","splice","catch","updatedUser","addProduct","product_name","product_descr","product_cat","product_price","updateData","ref","put","image","contentType","on","prog","Math","round","bytesTransferred","totalBytes","alert","message","child","getDownloadURL","url","add","product_id","product_image","dateadded","updateProducts","set","merge","copyProducts","prodIndex","product","fetchedProducts","orderBy","addedCart","find","increasedCart","productId","currentCartCopy","fetchedCart"],"mappings":"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","sourcesContent":["\nimport { db, storage, time } from './firebase'\n\nconst customersRef = db.collection('user')\nconst productsRef = db.collection('product')\nconst ordersRef = db.collection('orders')\n\n\nexport const initialState = {\n    users: [],\n    products: [],\n    cart: []\n};\nexport const getSubTotal = (cart) => {\n  return cart?.reduce((amount, item) => item.quantity > 1 ? amount+=parseInt(item.price * item.quantity) :amount+=parseInt(item.price), 0)   \n}\nexport const reducer = (prevState = initialState, action) => {\n    switch(action.type) {\n\n//USER OPERATIONS\n        case \"fetch_users\": \n            let fetchedUsers = [...prevState.users]\n            // console.log(\"Fetch Users Action: \", action)\n            try{\n                customersRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedUsers.length === 0){\n                            fetchedUsers.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedUsers.findIndex( users => users.userID === item.doc.data().userID)\n                            if(itemExists < 0){\n                                fetchedUsers.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }            \n            return {\n                 ...prevState, \n                users: fetchedUsers         \n            }\n\n        case \"delete_user\": \n            let copyUsers = [...prevState.users]\n            // console.log(\"Delete User Action: \", action)\n             try{ \n                customersRef\n                    .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            if(action.targetID){\n                                customersRef.doc(user.id).delete() \n                                let userIndex = copyUsers.findIndex( current => current.userID === user.data().userID)  \n                                if (userIndex >= 0) {\n                                copyUsers.splice(userIndex, 1);\n                                }                              \n                            }\n                        })\n                    })\n                    .catch(error => console.log(\"Deletion Error: \", error))         \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }           \n            return {\n                 ...prevState, \n                users: copyUsers          \n            }\n        case \"update_user\": \n\n            let updatedUser = [...prevState.users]\n            console.log(\"Update User: \", action)\n            return {\n                 ...prevState, \n                users: [...updatedUser]            \n            }\n//PRODUCT OPERATIONS\n        case \"add_product\": \n\n            let addProduct = [...prevState.products]\n            console.log(\"Add Action: \" ,action)\n            try{\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                            productsRef.add({\n                                product_id: productsRef.doc().id,\n                                product_name: product_name,\n                                product_descr : product_descr,\n                                product_image: url,\n                                product_price: product_price,\n                                product_cat: product_cat,\n                                dateadded: time,\n                                })\n                        })                  \n                        .catch( error => console.log(\"Error Adding Firestore Products: \", error))\n                        }\n                    )\n            }catch(error){\n                console.log(\"Error Updating Storage: \", error)\n            }\n\n            return {\n                 ...prevState, \n                products: [...addProduct]            \n            }     \n\n        case \"update_product_info\":\n            let updateProducts = [...prevState.products]\n            console.log(\"Update Action: \" ,action)\n            try {\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                        productsRef\n                            .where(\"product_id\", \"==\", `${action.targetID}`)\n                            .get()\n                            .then( snapshot => {\n                                snapshot.forEach( item => {\n                                    productsRef\n                                        .doc(item.id)\n                                        .set({\n                                                product_id: productsRef.doc().id,\n                                                product_name: product_name,\n                                                product_descr : product_descr,\n                                                product_image: url,\n                                                product_price: product_price,\n                                                product_cat: product_cat,\n                                                dateadded: time,\n                                        }\n                                        , {merge: true})\n                                })\n                            })\n                        })                  \n                        .catch( error => console.log(\"Error Adding Firestore Products: \", error))                        \n\n                    } \n                    )               \n            }catch(error){\n                console.log(\"Update Error: \", error)\n            }\n            return {\n                ...prevState, \n                products: updateProducts  \n            }\n\n        case \"delete_product\":\n            let copyProducts =  [...prevState.products];\n            try{ \n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            productsRef.doc(item.id).delete() \n                            let prodIndex = copyProducts.findIndex( product => product.product_id === item.data().product_id)  \n                            if (prodIndex >= 0) {\n                               copyProducts.splice(prodIndex, 1);\n                            }                           \n                        })\n                    })\n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: copyProducts              \n            }\n\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .orderBy('product_name', 'asc')\n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n            }\n\n\n//CART OPERATIONS  \n        case \"add_to_cart\": \n            let addedCart = [...prevState.cart]\n            console.log(\"Add To Cart Action: \", action)\n\n            try {\n                let itemExists = addedCart.find( product => product.product_id === action.item.product_id);\n                if (!itemExists){\n                    addedCart.push({...action.item, quantity: 1});\n                }\n            }catch(error){\n                console.log(\"Error Adding Item To Cart: \", error)\n            }\n            return {\n                 ...prevState, \n                cart: addedCart         \n            }  \n        case \"increase_qty\": \n            let increasedCart = [...prevState.cart]; \n            console.log(\"Increase Qty Action: \", action)\n\n            try{\n                let productId = increasedCart.find( product => product.product_id === action.item.product_id)\n                productId ? productId.quantity = parseInt(productId.quantity) + 1 : console.log(\"error\", productId);\n            }catch(error){\n                console.log(error);\n            }\n\n            return {\n                ...prevState,\n                cart: increasedCart\n            };\n        case \"decrease_qty\":\n            let currentCartCopy = [...prevState.cart]; \n            try{\n                let itemExists = currentCartCopy.find( product => product.product_id === action.item.product_id);\n\n                itemExists.quantity <= 1 ? \n                     currentCartCopy.splice(prevState.cart.findIndex( item  => item.id === action.item.product_id), 1)\n                    :itemExists.quantity = parseInt(itemExists.quantity) - 1\n                \n            }catch(error){\n                console.log(error);\n            }\n            return {\n                ...prevState,\n                cart: currentCartCopy\n            };            \n        case \"fetch_cart\": \n            let fetchedCart = [...prevState.cart]\n            console.log(\"Fetch Cart Action: \", action)\n            return {\n                 ...prevState, \n                cart: fetchedCart          \n            }  \n        default: \n            return prevState;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}