{"ast":null,"code":"import { db } from './firebase';\nexport const initialState = {\n  users: [],\n  products: []\n};\nexport const reducer = (prevState = initialState, action) => {\n  const customersRef = db.collection('user');\n  const productsRef = db.collection('product');\n\n  switch (action.type) {\n    case \"fetch_products\":\n      let copyProducts = [...prevState.products];\n      console.log(action);\n      productsRef.onSnapshot(snapshot => {\n        snapshot.docs.forEach(item => {\n          try {\n            if (copyProducts.length === 0) {\n              copyProducts.push(item.data());\n            } else {\n              let itemExists = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n\n              if (itemExists < 0) {\n                copyProducts.push(item.data());\n              }\n            }\n          } catch (error) {\n            console.log(error);\n          }\n        });\n      });\n      return { ...prevState,\n        products: copyProducts\n      };\n\n    case \"fetch_user_details\":\n      let copyUsers = [...prevState.users];\n      let selectedUser;\n      customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n        snapshot.forEach(user => {\n          selectedUser = user.data();\n          return selectedUser;\n        });\n      }).catch(error => console.log(\"Update Error: \", error));\n      console.log(action, selectedUser);\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    default:\n      return prevState;\n  } // return prevState;\n\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","initialState","users","products","reducer","prevState","action","customersRef","collection","productsRef","type","copyProducts","console","log","onSnapshot","snapshot","docs","forEach","item","length","push","data","itemExists","findIndex","product","product_id","error","copyUsers","selectedUser","where","targetID","get","then","user","catch"],"mappings":"AACA,SAASA,EAAT,QAAmB,YAAnB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,QAAQ,EAAE;AAFc,CAArB;AAOP,OAAO,MAAMC,OAAO,GAAG,CAACC,SAAS,GAAGJ,YAAb,EAA2BK,MAA3B,KAAsC;AACzD,QAAMC,YAAY,GAAGP,EAAE,CAACQ,UAAH,CAAc,MAAd,CAArB;AACA,QAAMC,WAAW,GAAGT,EAAE,CAACQ,UAAH,CAAc,SAAd,CAApB;;AAGA,UAAOF,MAAM,CAACI,IAAd;AAEI,SAAK,gBAAL;AACI,UAAIC,YAAY,GAAG,CAAC,GAAGN,SAAS,CAACF,QAAd,CAAnB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACAG,MAAAA,WAAW,CACVK,UADD,CACaC,QAAD,IAAc;AACtBA,QAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAuBC,IAAI,IAAI;AAC3B,cAAG;AACC,gBAAGP,YAAY,CAACQ,MAAb,KAAwB,CAA3B,EAA6B;AACzBR,cAAAA,YAAY,CAACS,IAAb,CAAkBF,IAAI,CAACG,IAAL,EAAlB;AACH,aAFD,MAEK;AACD,kBAAIC,UAAU,GAAGX,YAAY,CAACY,SAAb,CAAwBC,OAAO,IAAIA,OAAO,CAACC,UAAR,KAAuBP,IAAI,CAACG,IAAL,GAAYI,UAAtE,CAAjB;;AAEA,kBAAGH,UAAU,GAAG,CAAhB,EAAkB;AACdX,gBAAAA,YAAY,CAACS,IAAb,CAAkBF,IAAI,CAACG,IAAL,EAAlB;AACH;AAEJ;AACJ,WAXD,CAWC,OAAMK,KAAN,EAAY;AACTd,YAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACH;AAGJ,SAjBD;AAkBH,OApBD;AAqBA,aAAM,EACF,GAAGrB,SADD;AAEFF,QAAAA,QAAQ,EAAEQ;AAFR,OAAN;;AAKJ,SAAK,oBAAL;AACI,UAAIgB,SAAS,GAAG,CAAC,GAAGtB,SAAS,CAACH,KAAd,CAAhB;AAEA,UAAI0B,YAAJ;AACArB,MAAAA,YAAY,CACPsB,KADL,CACW,QADX,EACqB,IADrB,EAC4B,GAAEvB,MAAM,CAACwB,QAAS,EAD9C,EAESC,GAFT,GAGSC,IAHT,CAGejB,QAAQ,IAAI;AACfA,QAAAA,QAAQ,CAACE,OAAT,CAAkBgB,IAAI,IAAI;AACtBL,UAAAA,YAAY,GAAGK,IAAI,CAACZ,IAAL,EAAf;AACA,iBAAOO,YAAP;AACH,SAHD;AAIH,OART,EASSM,KATT,CASiBR,KAAD,IAAWd,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Ba,KAA9B,CAT3B;AAUAd,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAAoBsB,YAApB;AACA,aAAM,EACF,GAAGvB,SADD;AAEFH,QAAAA,KAAK,EAAEyB;AAFL,OAAN;;AAMJ;AACI,aAAOtB,SAAP;AArDR,GALyD,CA4DjD;;AAEX,CA9DM","sourcesContent":["\nimport { db } from './firebase'\n\nexport const initialState = {\n    users: [],\n    products: []\n\n};\n\n\nexport const reducer = (prevState = initialState, action) => {\n    const customersRef = db.collection('user')\n    const productsRef = db.collection('product')\n\n\n    switch(action.type) {\n\n        case \"fetch_products\":\n            let copyProducts = [...prevState.products]\n            console.log(action)\n            productsRef \n            .onSnapshot((snapshot) => {\n                snapshot.docs.forEach( item => {\n                    try{\n                        if(copyProducts.length === 0){\n                            copyProducts.push(item.data())\n                        }else{\n                            let itemExists = copyProducts.findIndex( product => product.product_id === item.data().product_id)\n\n                            if(itemExists < 0){\n                                copyProducts.push(item.data())\n                            }\n\n                        }\n                    }catch(error){\n                        console.log(error)\n                    }\n\n\n                })\n            })\n            return{\n                ...prevState, \n                products: copyProducts,\n            }\n\n        case \"fetch_user_details\":\n            let copyUsers = [...prevState.users]\n\n            let selectedUser;\n            customersRef\n                .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            selectedUser = user.data()\n                            return selectedUser\n                        })\n                    })\n                    .catch( (error) => console.log(\"Update Error: \", error))\n            console.log(action, selectedUser)\n            return{\n                ...prevState,\n                users: copyUsers,\n            }\n\n\n        default: \n            return prevState;\n    }\n            // return prevState;\n\n}\n\n"]},"metadata":{},"sourceType":"module"}