{"ast":null,"code":"import { db } from './firebase';\nexport const initialState = {\n  users: [],\n  products: []\n};\nexport const reducer = (prevState = initialState, action) => {\n  const customersRef = db.collection('user');\n  const productsRef = db.collection('product');\n\n  switch (action.type) {\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n      console.log(action);\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            let prodIndex = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n            console.log(prodIndex);\n\n            if (prodIndex >= 0) {\n              return copyProducts.splice(prodIndex, 1);\n            } // productsRef.doc(item.id).delete() \n\n          });\n        }); // .then( () => {\n        // .catch(error => console.log(\"Deletion Error: \", error))   \n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: [...copyProducts]\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts // products: [...fetchedProducts],\n\n      };\n\n    case \"fetch_user_details\":\n      let copyUsers = [...prevState.users];\n      let selectedUser;\n      customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n        snapshot.forEach(user => {\n          selectedUser = user.data();\n          return selectedUser;\n        });\n      }).catch(error => console.log(\"Update Error: \", error));\n      console.log(action, selectedUser);\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    default:\n      return prevState;\n  } // return prevState;\n\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","initialState","users","products","reducer","prevState","action","customersRef","collection","productsRef","type","copyProducts","console","log","where","targetID","get","then","snapshot","forEach","item","prodIndex","findIndex","product","product_id","data","splice","error","fetchedProducts","onSnapshot","docChanges","length","push","doc","itemExists","copyUsers","selectedUser","user","catch"],"mappings":"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","sourcesContent":["\nimport { db } from './firebase'\n\nexport const initialState = {\n    users: [],\n    products: []\n\n};\n\n\nexport const reducer = (prevState = initialState, action) => {\n    const customersRef = db.collection('user')\n    const productsRef = db.collection('product')\n\n    switch(action.type) {\n\n        case \"delete_product\" :\n            let copyProducts =  [...prevState.products];\n            console.log(action)\n            try{ \n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            let prodIndex = copyProducts.findIndex( product => product.product_id ===item.data().product_id)  \n                            console.log(prodIndex)\n                            if (prodIndex >= 0) {\n                                return copyProducts.splice(prodIndex, 1);\n                            }                           \n                            // productsRef.doc(item.id).delete() \n                        })\n                    })\n                    \n                    // .then( () => {\n                   \n\n                    // .catch(error => console.log(\"Deletion Error: \", error))   \n                    \n                    \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: [...copyProducts]                \n            }\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n                // products: [...fetchedProducts],\n            }\n\n        case \"fetch_user_details\":\n            let copyUsers = [...prevState.users]\n\n            let selectedUser;\n            customersRef\n                .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            selectedUser = user.data()\n                            return selectedUser\n                        })\n                    })\n                    .catch( (error) => console.log(\"Update Error: \", error))\n            console.log(action, selectedUser)\n            return{\n                ...prevState,\n                users: copyUsers,\n            }\n\n\n        default: \n            return prevState;\n    }\n            // return prevState;\n\n}\n\n"]},"metadata":{},"sourceType":"module"}