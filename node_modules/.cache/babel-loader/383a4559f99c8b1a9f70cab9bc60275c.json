{"ast":null,"code":"import { db, storage, time } from './firebase';\nconst customersRef = db.collection('user');\nconst productsRef = db.collection('product');\nconst ordersRef = db.collection('order');\nconst orderDetailsRef = db.collection('orderDetails');\nexport const initialState = {\n  users: [],\n  products: [],\n  cart: [],\n  orders: [],\n  userOrders: []\n}; // USER FUNCTIONS\n\nexport const getTotalCustomers = customers => customers === null || customers === void 0 ? void 0 : customers.filter(customer => customer.type === \"customer\").length;\nexport const getTotalTeam = customers => customers === null || customers === void 0 ? void 0 : customers.filter(customer => customer.type === \"admin\").length; // CART FUNCTIONS\n\nexport const getSubTotal = cart => {\n  return cart === null || cart === void 0 ? void 0 : cart.reduce((amount, item) => item.quantity > 1 ? amount += parseInt(item.product_price * item.quantity) : amount += parseInt(item.product_price), 0);\n};\nexport const getproductTotal = cart => cart === null || cart === void 0 ? void 0 : cart.reduce((amount, item) => amount += parseInt(item.quantity), 0);\nexport const reducer = (prevState = initialState, action) => {\n  switch (action.type) {\n    //USER OPERATIONS\n    case \"fetch_users\":\n      let fetchedUsers = [...prevState.users]; // console.log(\"Fetch Users Action: \", action)\n\n      try {\n        customersRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedUsers.length === 0) {\n              fetchedUsers.push(item.doc.data());\n            } else {\n              let itemExists = fetchedUsers.findIndex(users => users.userID === item.doc.data().userID);\n\n              if (itemExists < 0) {\n                fetchedUsers.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        users: fetchedUsers\n      };\n\n    case \"delete_user\":\n      let copyUsers = [...prevState.users]; // console.log(\"Delete User Action: \", action)\n\n      try {\n        customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(user => {\n            if (action.targetID) {\n              customersRef.doc(user.id).delete();\n              let userIndex = copyUsers.findIndex(current => current.userID === user.data().userID);\n\n              if (userIndex >= 0) {\n                copyUsers.splice(userIndex, 1);\n              }\n            }\n          });\n        }).catch(error => console.log(\"Deletion Error: \", error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    case \"update_user\":\n      let updatedUser = [...prevState.users];\n      console.log(\"Update User: \", action);\n      return { ...prevState,\n        users: [...updatedUser]\n      };\n    //PRODUCT OPERATIONS\n\n    case \"add_product\":\n      let addProduct = [...prevState.products];\n      console.log(\"Add Action: \", action);\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.add({\n              product_id: productsRef.doc().id,\n              product_name: product_name,\n              product_descr: product_descr,\n              product_image: url,\n              product_price: product_price,\n              product_cat: product_cat,\n              dateadded: time\n            });\n          }).catch(error => console.log(\"Error Adding Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Error Updating Storage: \", error);\n      }\n\n      return { ...prevState,\n        products: [...addProduct]\n      };\n\n    case \"update_product_info\":\n      let updateProducts = [...prevState.products];\n      console.log(\"Update Action: \", action);\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n              snapshot.forEach(item => {\n                productsRef.doc(item.id).set({\n                  product_id: productsRef.doc().id,\n                  product_name: product_name,\n                  product_descr: product_descr,\n                  product_image: url,\n                  product_price: product_price,\n                  product_cat: product_cat,\n                  dateadded: time\n                }, {\n                  merge: true\n                });\n              });\n            });\n          }).catch(error => console.log(\"Error Adding Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Update Error: \", error);\n      }\n\n      return { ...prevState,\n        products: updateProducts\n      };\n\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            productsRef.doc(item.id).delete();\n            let prodIndex = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n\n            if (prodIndex >= 0) {\n              copyProducts.splice(prodIndex, 1);\n            }\n          });\n        });\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: copyProducts\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.orderBy('product_name', 'asc').onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts\n      };\n    //CART OPERATIONS  \n\n    case \"add_to_cart\":\n      let addedCart = [...prevState.cart];\n      console.log(\"Add To Cart Action: \", action);\n\n      try {\n        let itemExists = addedCart.find(product => product.product_id === action.item.product_id);\n        !itemExists && addedCart.push({ ...action.item,\n          quantity: 1\n        });\n      } catch (error) {\n        console.log(\"Error Adding Item To Cart: \", error);\n      }\n\n      return { ...prevState,\n        cart: addedCart\n      };\n\n    case \"increase_qty\":\n      let increasedCart = [...prevState.cart];\n      console.log(\"Increase Qty Action: \", action);\n\n      try {\n        let productId = increasedCart.findIndex(product => product.product_id === action.item.product_id);\n        productId !== -1 ? increasedCart[productId].quantity += 1 : console.log(\"Error Increasing Quantity: \", productId);\n      } catch (error) {\n        console.log(\"Error Increasing Quantity: \", error);\n      }\n\n      return { ...prevState,\n        cart: increasedCart\n      };\n\n    case \"decrease_qty\":\n      let currentCartCopy = [...prevState.cart];\n\n      try {\n        let itemExists = currentCartCopy.find(product => product.product_id === action.item.product_id);\n        itemExists.quantity <= 1 ? currentCartCopy.splice(prevState.cart.findIndex(item => item.id === action.item.product_id), 1) : itemExists.quantity = parseInt(itemExists.quantity) - 1;\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        cart: currentCartCopy\n      };\n    // ADMIN SIDE: FETCH ORDERS \n\n    case \"fetch_orders\":\n      let fetchedOrders = [...prevState.orders];\n\n      try {\n        ordersRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedOrders.length === 0) {\n              fetchedOrders.push(item.doc.data());\n            } else {\n              let itemExists = fetchedOrders.findIndex(order => order.orderID === item.doc.data().orderID);\n\n              if (itemExists < 0) {\n                fetchedOrders.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        orders: fetchedOrders\n      };\n    //SEND CART ITEMS TO DB\n\n    case \"new_order\":\n      let copyOrders = [...prevState.orders];\n      return { ...prevState,\n        orders: copyOrders\n      };\n    //ACCOUNT ACTIONS\n\n    case \"user_order_history\":\n      let copyUserOrders = [...prevState.userOrders];\n\n      try {\n        ordersRef.where(\"customerID\", \"==\", `${action.userID}`).get().then(snapshot => snapshot.forEach(item => copyUserOrders.push({ ...item.data()\n        })));\n      } catch (error) {\n        console.log(\"Error Displayong Order History: \", error);\n      }\n\n      return { ...prevState,\n        userOrders: copyUserOrders\n      };\n\n    default:\n      return prevState;\n  }\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","storage","time","customersRef","collection","productsRef","ordersRef","orderDetailsRef","initialState","users","products","cart","orders","userOrders","getTotalCustomers","customers","filter","customer","type","length","getTotalTeam","getSubTotal","reduce","amount","item","quantity","parseInt","product_price","getproductTotal","reducer","prevState","action","fetchedUsers","onSnapshot","snapshot","docChanges","forEach","push","doc","data","itemExists","findIndex","userID","error","console","log","copyUsers","where","targetID","get","then","user","id","delete","userIndex","current","splice","catch","updatedUser","addProduct","product_name","product_descr","product_cat","updateData","ref","put","image","contentType","on","prog","Math","round","bytesTransferred","totalBytes","alert","message","child","getDownloadURL","url","add","product_id","product_image","dateadded","updateProducts","set","merge","copyProducts","prodIndex","product","fetchedProducts","orderBy","addedCart","find","increasedCart","productId","currentCartCopy","fetchedOrders","order","orderID","copyOrders","copyUserOrders"],"mappings":"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","sourcesContent":["\nimport { db, storage, time } from './firebase'\n\nconst customersRef = db.collection('user')\nconst productsRef = db.collection('product')\nconst ordersRef = db.collection('order')\nconst orderDetailsRef = db.collection('orderDetails')\n\nexport const initialState = {\n    users: [],\n    products: [],\n    cart: [],\n    orders: [],\n    userOrders: []\n};\n\n// USER FUNCTIONS\nexport const getTotalCustomers = (customers) => customers?.filter(customer => customer.type === \"customer\").length\n \nexport const getTotalTeam = (customers) => customers?.filter(customer => customer.type === \"admin\").length\n\n// CART FUNCTIONS\nexport const getSubTotal = (cart) => {\n  return cart?.reduce((amount, item) => item.quantity > 1 ? amount+=parseInt(item.product_price * item.quantity) :amount+=parseInt(item.product_price), 0)   \n}\nexport const getproductTotal = (cart) => cart?.reduce((amount, item) => amount+=parseInt(item.quantity), 0)\n\n\nexport const reducer = (prevState = initialState, action) => {\n    switch(action.type) {\n\n//USER OPERATIONS\n        case \"fetch_users\": \n            let fetchedUsers = [...prevState.users]\n            // console.log(\"Fetch Users Action: \", action)\n            try{\n                customersRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedUsers.length === 0){\n                            fetchedUsers.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedUsers.findIndex( users => users.userID === item.doc.data().userID)\n                            if(itemExists < 0){\n                                fetchedUsers.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }            \n            return {\n                 ...prevState, \n                users: fetchedUsers         \n            }\n\n        case \"delete_user\": \n            let copyUsers = [...prevState.users]\n            // console.log(\"Delete User Action: \", action)\n             try{ \n                customersRef\n                    .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            if(action.targetID){\n                                customersRef.doc(user.id).delete() \n                                let userIndex = copyUsers.findIndex( current => current.userID === user.data().userID)  \n                                if (userIndex >= 0) {\n                                copyUsers.splice(userIndex, 1);\n                                }                              \n                            }\n                        })\n                    })\n                    .catch(error => console.log(\"Deletion Error: \", error))         \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }           \n            return {\n                 ...prevState, \n                users: copyUsers          \n            }\n        case \"update_user\": \n\n            let updatedUser = [...prevState.users]\n            console.log(\"Update User: \", action)\n            return {\n                 ...prevState, \n                users: [...updatedUser]            \n            }\n//PRODUCT OPERATIONS\n        case \"add_product\": \n\n            let addProduct = [...prevState.products]\n            console.log(\"Add Action: \" ,action)\n            try{\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                            productsRef.add({\n                                product_id: productsRef.doc().id,\n                                product_name: product_name,\n                                product_descr : product_descr,\n                                product_image: url,\n                                product_price: product_price,\n                                product_cat: product_cat,\n                                dateadded: time,\n                                })\n                        })                  \n                        .catch( error => console.log(\"Error Adding Firestore Products: \", error))\n                        }\n                    )\n            }catch(error){\n                console.log(\"Error Updating Storage: \", error)\n            }\n\n            return {\n                 ...prevState, \n                products: [...addProduct]            \n            }     \n\n        case \"update_product_info\":\n            let updateProducts = [...prevState.products]\n            console.log(\"Update Action: \" ,action)\n            try {\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                        productsRef\n                            .where(\"product_id\", \"==\", `${action.targetID}`)\n                            .get()\n                            .then( snapshot => {\n                                snapshot.forEach( item => {\n                                    productsRef\n                                        .doc(item.id)\n                                        .set({\n                                                product_id: productsRef.doc().id,\n                                                product_name: product_name,\n                                                product_descr : product_descr,\n                                                product_image: url,\n                                                product_price: product_price,\n                                                product_cat: product_cat,\n                                                dateadded: time,\n                                        }\n                                        , {merge: true})\n                                })\n                            })\n                        })                  \n                        .catch( error => console.log(\"Error Adding Firestore Products: \", error))                        \n\n                    } \n                    )               \n            }catch(error){\n                console.log(\"Update Error: \", error)\n            }\n            return {\n                ...prevState, \n                products: updateProducts  \n            }\n\n        case \"delete_product\":\n            let copyProducts =  [...prevState.products];\n            try{ \n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            productsRef.doc(item.id).delete() \n                            let prodIndex = copyProducts.findIndex( product => product.product_id === item.data().product_id)  \n                            if (prodIndex >= 0) {\n                               copyProducts.splice(prodIndex, 1);\n                            }                           \n                        })\n                    })\n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: copyProducts              \n            }\n\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .orderBy('product_name', 'asc')\n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n            }\n//CART OPERATIONS  \n        case \"add_to_cart\": \n            let addedCart = [...prevState.cart]\n            console.log(\"Add To Cart Action: \", action)\n            try {\n                let itemExists = addedCart.find( product => product.product_id === action.item.product_id);\n                !itemExists && addedCart.push({...action.item, quantity: 1}) \n            \n            }catch(error){\n                console.log(\"Error Adding Item To Cart: \", error)\n            }\n            return {\n                 ...prevState, \n                cart: addedCart         \n            }  \n        case \"increase_qty\": \n            let increasedCart = [...prevState.cart]; \n            console.log(\"Increase Qty Action: \", action)\n            try{\n                let productId = increasedCart.findIndex(product => product.product_id === action.item.product_id)\n                productId !== -1 ? increasedCart[productId].quantity +=1\n                : console.log(\"Error Increasing Quantity: \", productId);\n               \n            }catch(error){\n                console.log(\"Error Increasing Quantity: \",error);\n            }\n            return {\n                ...prevState,\n                cart: increasedCart\n            };\n    \n        case \"decrease_qty\":\n            let currentCartCopy = [...prevState.cart]; \n            try{\n                let itemExists = currentCartCopy.find( product => product.product_id === action.item.product_id);\n\n                itemExists.quantity <= 1 ? \n                     currentCartCopy.splice(prevState.cart.findIndex( item  => item.id === action.item.product_id), 1)\n                    :itemExists.quantity = parseInt(itemExists.quantity) - 1\n                \n            }catch(error){\n                console.log(error);\n            }\n            return {\n                ...prevState,\n                cart: currentCartCopy\n            };            \n\n// ADMIN SIDE: FETCH ORDERS \n        case \"fetch_orders\": \n        let fetchedOrders = [...prevState.orders];\n        try{\n            ordersRef \n            .onSnapshot((snapshot) => {\n                snapshot.docChanges().forEach( item => {\n                    if(fetchedOrders.length === 0){\n                        fetchedOrders.push(item.doc.data())\n                    }else{\n                        let itemExists = fetchedOrders.findIndex( order => order.orderID === item.doc.data().orderID)\n\n                        if(itemExists < 0){\n                            fetchedOrders.push(item.doc.data())\n                        }\n                    }\n                })\n            })\n        }catch(error){\n            console.log(error)\n        }\n        return{\n            ...prevState, \n            orders: fetchedOrders,\n        } \n//SEND CART ITEMS TO DB\n        case \"new_order\":\n        let copyOrders = [...prevState.orders];\n\n        return {\n            ...prevState,\n            orders: copyOrders\n        };            \n\n//ACCOUNT ACTIONS\n        case \"user_order_history\":\n            let copyUserOrders = [...prevState.userOrders];\n            try{\n                ordersRef\n                    .where(\"customerID\", \"==\", `${action.userID}`)\n                    .get()\n                    .then( snapshot => snapshot.forEach( item => copyUserOrders.push({...item.data()})\n                    ))\n            }catch(error){\n                console.log(\"Error Displayong Order History: \", error)\n            }\n            return {\n            ...prevState,\n            userOrders: copyUserOrders                \n            }\n        default: \n            return prevState;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}