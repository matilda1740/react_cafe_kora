{"ast":null,"code":"import { db, storage, time } from './firebase';\nconst customersRef = db.collection('user');\nconst productsRef = db.collection('product');\nexport const initialState = {\n  users: [],\n  products: []\n};\nexport const reducer = (prevState = initialState, action) => {\n  switch (action.type) {\n    case \"fetch_users\":\n      let fetchedUsers = [...prevState.users]; // console.log(\"Fetch Users Action: \", action)\n\n      try {\n        customersRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedUsers.length === 0) {\n              fetchedUsers.push(item.doc.data());\n            } else {\n              let itemExists = fetchedUsers.findIndex(users => users.userID === item.doc.data().userID);\n\n              if (itemExists < 0) {\n                fetchedUsers.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        users: fetchedUsers\n      };\n\n    case \"update_user\":\n      let updatedUser = [...prevState.users];\n      console.log(action);\n      return { ...prevState,\n        users: [...updatedUser]\n      };\n\n    case \"delete_user\":\n      let copyUsers = [...prevState.users];\n      console.log(\"Delete User Action: \", action);\n\n      try {\n        customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(user => {\n            if (action.targetID) {\n              console.log(\"User: \", user.id, user.data().userID); // customersRef.doc(user.id).delete() \n\n              let userIndex = copyUsers.findIndex(user => user.userID === user.data().userID);\n\n              if (userIndex >= 0) {\n                copyUsers.splice(userIndex, 1);\n              }\n            }\n          });\n        }).catch(error => console.log(\"Deletion Error: \", error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    case \"add_product\":\n      let addProduct = [...prevState.products];\n      console.log(\"Add Action: \", action);\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.add({\n              product_id: productsRef.doc().id,\n              product_name: product_name,\n              product_descr: product_descr,\n              product_image: url,\n              product_price: product_price,\n              product_cat: product_cat,\n              dateadded: time\n            });\n          }).catch(error => console.log(\"Error Adding Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Error Updating Storage: \", error);\n      }\n\n      return { ...prevState,\n        products: [...addProduct]\n      };\n\n    case \"update_product_info\":\n      let updateProducts = [...prevState.products];\n      console.log(\"Update Action: \", action);\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n              snapshot.forEach(item => {\n                productsRef.doc(item.id).set({\n                  product_id: productsRef.doc().id,\n                  product_name: product_name,\n                  product_descr: product_descr,\n                  product_image: url,\n                  product_price: product_price,\n                  product_cat: product_cat,\n                  dateadded: time\n                }, {\n                  merge: true\n                });\n              });\n            });\n          }).catch(error => console.log(\"Error Adding Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Update Error: \", error);\n      }\n\n      return { ...prevState,\n        products: updateProducts\n      };\n\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            productsRef.doc(item.id).delete();\n            let prodIndex = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n\n            if (prodIndex >= 0) {\n              copyProducts.splice(prodIndex, 1);\n            }\n          }); // console.log(copyProducts)\n        }).catch(error => console.log(error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: copyProducts\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts\n      };\n\n    default:\n      return prevState;\n  }\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","storage","time","customersRef","collection","productsRef","initialState","users","products","reducer","prevState","action","type","fetchedUsers","onSnapshot","snapshot","docChanges","forEach","item","length","push","doc","data","itemExists","findIndex","userID","error","console","log","updatedUser","copyUsers","where","targetID","get","then","user","id","userIndex","splice","catch","addProduct","product_name","product_descr","product_cat","product_price","updateData","ref","put","image","contentType","on","prog","Math","round","bytesTransferred","totalBytes","alert","message","child","getDownloadURL","url","add","product_id","product_image","dateadded","updateProducts","set","merge","copyProducts","delete","prodIndex","product","fetchedProducts"],"mappings":"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","sourcesContent":["\nimport { db, storage, time } from './firebase'\n\nconst customersRef = db.collection('user')\nconst productsRef = db.collection('product')\n\nexport const initialState = {\n    users: [],\n    products: []\n};\n\nexport const reducer = (prevState = initialState, action) => {\n    switch(action.type) {\n        case \"fetch_users\": \n            let fetchedUsers = [...prevState.users]\n            // console.log(\"Fetch Users Action: \", action)\n            try{\n                customersRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedUsers.length === 0){\n                            fetchedUsers.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedUsers.findIndex( users => users.userID === item.doc.data().userID)\n                            if(itemExists < 0){\n                                fetchedUsers.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }            \n            return {\n                 ...prevState, \n                users: fetchedUsers         \n            }\n        case \"update_user\": \n\n            let updatedUser = [...prevState.users]\n            console.log(action)\n            return {\n                 ...prevState, \n                users: [...updatedUser]            \n            }\n        case \"delete_user\": \n\n            let copyUsers = [...prevState.users]\n            console.log(\"Delete User Action: \", action)\n\n             try{ \n                customersRef\n                    .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            if(action.targetID){\n                                console.log(\"User: \", user.id, user.data().userID)\n                                // customersRef.doc(user.id).delete() \n                                let userIndex = copyUsers.findIndex( user => user.userID === user.data().userID)  \n                                if (userIndex >= 0) {\n                                copyUsers.splice(userIndex, 1);\n                                }                              \n                            }\n                        })\n                    })\n                    .catch(error => console.log(\"Deletion Error: \", error))         \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }           \n            return {\n                 ...prevState, \n                users: copyUsers          \n            }\n\n        case \"add_product\": \n\n            let addProduct = [...prevState.products]\n            console.log(\"Add Action: \" ,action)\n            try{\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                            productsRef.add({\n                                product_id: productsRef.doc().id,\n                                product_name: product_name,\n                                product_descr : product_descr,\n                                product_image: url,\n                                product_price: product_price,\n                                product_cat: product_cat,\n                                dateadded: time,\n                                })\n                        })                  \n                        .catch( error => console.log(\"Error Adding Firestore Products: \", error))\n                        }\n                    )\n            }catch(error){\n                console.log(\"Error Updating Storage: \", error)\n            }\n\n            return {\n                 ...prevState, \n                products: [...addProduct]            \n            }     \n\n        case \"update_product_info\":\n            let updateProducts = [...prevState.products]\n            console.log(\"Update Action: \" ,action)\n            try {\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                        productsRef\n                            .where(\"product_id\", \"==\", `${action.targetID}`)\n                            .get()\n                            .then( snapshot => {\n                                snapshot.forEach( item => {\n                                    productsRef\n                                        .doc(item.id)\n                                        .set({\n                                                product_id: productsRef.doc().id,\n                                                product_name: product_name,\n                                                product_descr : product_descr,\n                                                product_image: url,\n                                                product_price: product_price,\n                                                product_cat: product_cat,\n                                                dateadded: time,\n                                        }\n                                        , {merge: true})\n                                })\n                            })\n                        })                  \n                        .catch( error => console.log(\"Error Adding Firestore Products: \", error))                        \n\n                    } \n                    )               \n            }catch(error){\n                console.log(\"Update Error: \", error)\n            }\n            return {\n                ...prevState, \n                products: updateProducts  \n            }\n\n        case \"delete_product\":\n            let copyProducts =  [...prevState.products];\n            try{ \n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            productsRef.doc(item.id).delete() \n                            let prodIndex = copyProducts.findIndex( product => product.product_id === item.data().product_id)  \n                            if (prodIndex >= 0) {\n                               copyProducts.splice(prodIndex, 1);\n                            }                           \n                        })\n                        // console.log(copyProducts)\n                    })\n                    .catch( error => console.log(error))\n                    \n                    \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: copyProducts              \n            }\n\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n            }\n\n        default: \n            return prevState;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}