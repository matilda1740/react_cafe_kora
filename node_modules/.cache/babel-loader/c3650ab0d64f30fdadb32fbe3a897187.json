{"ast":null,"code":"import { db, storage, time } from './firebase';\nexport const initialState = {\n  users: [],\n  products: []\n};\nexport const reducer = (prevState = initialState, action) => {\n  const customersRef = db.collection('user');\n  const productsRef = db.collection('product');\n\n  switch (action.type) {\n    case \"update_user\":\n      let updatedUser = [...prevState.users];\n      console.log(action);\n      return { ...prevState,\n        users: [...updatedUser]\n      };\n\n    case \"delete_user\":\n      let deleteUser = [...prevState.users];\n      return { ...prevState,\n        users: [...deleteUser]\n      };\n\n    case \"add_product\":\n      let addProduct = [...prevState.products]; // console.log(\"Add Action: \" ,action)\n\n      try {\n        const {\n          product_name,\n          product_descr,\n          product_cat,\n          product_price\n        } = action.updateData;\n        storage.ref(`/products/${product_cat}/${product_name}`).put(action.image, {\n          contentType: 'image/png'\n        }).on(\"state_changed\", snapshot => {\n          const prog = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100); // setProgress(prog);\n          // console.log(snapshot, progress)\n        }, error => {\n          console.log(error);\n          alert(error.message);\n        }, () => {\n          storage.ref(`/products/${product_cat}/`).child(product_name).getDownloadURL().then(url => {\n            productsRef.add({\n              product_id: productsRef.doc().id,\n              product_name: product_name,\n              product_descr: product_descr,\n              product_image: url,\n              product_price: product_price,\n              product_cat: product_cat,\n              dateadded: time\n            });\n          }).catch(error => console.log(\"Error Updating Firestore Products: \", error));\n        });\n      } catch (error) {\n        console.log(\"Error Updating Storage: \", error);\n      }\n\n      return { ...prevState,\n        products: [...addProduct]\n      };\n\n    case \"update_product_info\":\n      let updateProducts = [...prevState.products];\n      console.log(\"Update Action: \", action);\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            productsRef.doc(item.id).set({ ...action.updateData\n            });\n          });\n        }).catch(error => console.log(error));\n      } catch (error) {\n        console.log(\"Update Error: \", error);\n      }\n\n      return { ...prevState,\n        products: updateProducts\n      };\n\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            productsRef.doc(item.id).delete();\n            let prodIndex = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n\n            if (prodIndex >= 0) {\n              copyProducts.splice(prodIndex, 1);\n            }\n          }); // console.log(copyProducts)\n        }).catch(error => console.log(error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: copyProducts\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts // products: [...fetchedProducts],\n\n      };\n\n    case \"fetch_user_details\":\n      let copyUsers = [...prevState.users];\n      let selectedUser;\n      customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n        snapshot.forEach(user => {\n          selectedUser = user.data();\n          return selectedUser;\n        });\n      }).catch(error => console.log(\"Update Error: \", error));\n      console.log(action, selectedUser);\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    default:\n      return prevState;\n  }\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","storage","time","initialState","users","products","reducer","prevState","action","customersRef","collection","productsRef","type","updatedUser","console","log","deleteUser","addProduct","product_name","product_descr","product_cat","product_price","updateData","ref","put","image","contentType","on","snapshot","prog","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","add","product_id","doc","id","product_image","dateadded","catch","updateProducts","where","targetID","get","forEach","item","set","copyProducts","delete","prodIndex","findIndex","product","data","splice","fetchedProducts","onSnapshot","docChanges","length","push","itemExists","copyUsers","selectedUser","user"],"mappings":"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","sourcesContent":["\nimport { db, storage, time } from './firebase'\n\nexport const initialState = {\n    users: [],\n    products: []\n\n};\n\n\nexport const reducer = (prevState = initialState, action) => {\n    const customersRef = db.collection('user')\n    const productsRef = db.collection('product')\n\n    switch(action.type) {\n\n        case \"update_user\": \n\n            let updatedUser = [...prevState.users]\n            console.log(action)\n            return {\n                 ...prevState, \n                users: [...updatedUser]            \n            }\n        case \"delete_user\": \n\n            let deleteUser = [...prevState.users]\n            return {\n                 ...prevState, \n                users: [...deleteUser]            \n            }\n\n        case \"add_product\": \n\n            let addProduct = [...prevState.products]\n            // console.log(\"Add Action: \" ,action)\n            try{\n                const { product_name, product_descr, product_cat, product_price } = action.updateData\n\n                storage\n                    .ref(`/products/${product_cat}/${product_name}`)\n                    .put(action.image, {contentType: 'image/png'},)\n                    .on(\"state_changed\" , \n                        (snapshot) => {\n                        const prog = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) *  100\n                        );\n                        // setProgress(prog);\n                        // console.log(snapshot, progress)\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                        .ref(`/products/${product_cat}/`)\n                        .child(product_name)\n                        .getDownloadURL()\n                        .then((url) => {\n                            productsRef.add({\n                                product_id: productsRef.doc().id,\n                                product_name: product_name,\n                                product_descr : product_descr,\n                                product_image: url,\n                                product_price: product_price,\n                                product_cat: product_cat,\n                                dateadded: time,\n                                })\n                        })                  \n                        .catch( error => console.log(\"Error Updating Firestore Products: \", error))\n                            }\n                    )\n            }catch(error){\n                console.log(\"Error Updating Storage: \", error)\n            }\n\n            return {\n                 ...prevState, \n                products: [...addProduct]            \n            }      \n\n        case \"update_product_info\":\n            let updateProducts = [...prevState.products]\n            console.log(\"Update Action: \" ,action)\n            try {\n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            productsRef\n                                .doc(item.id)\n                                .set({\n                                    ...action.updateData\n                                })\n                        })\n                    })\n                    .catch( error => console.log(error))\n\n\n            }catch(error){\n                console.log(\"Update Error: \", error)\n            }\n            return {\n                ...prevState, \n                products: updateProducts  \n            }\n\n        case \"delete_product\":\n            let copyProducts =  [...prevState.products];\n            try{ \n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            productsRef.doc(item.id).delete() \n                            let prodIndex = copyProducts.findIndex( product => product.product_id ===item.data().product_id)  \n                            if (prodIndex >= 0) {\n                               copyProducts.splice(prodIndex, 1);\n                            }                           \n                        })\n                        // console.log(copyProducts)\n                    })\n                    .catch( error => console.log(error))\n                    \n                    \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: copyProducts              \n            }\n\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n                // products: [...fetchedProducts],\n            }\n\n        case \"fetch_user_details\":\n            let copyUsers = [...prevState.users]\n\n            let selectedUser;\n            customersRef\n                .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            selectedUser = user.data()\n                            return selectedUser\n                        })\n                    })\n                    .catch( (error) => console.log(\"Update Error: \", error))\n            console.log(action, selectedUser)\n            return{\n                ...prevState,\n                users: copyUsers,\n            }\n        default: \n            return prevState;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}