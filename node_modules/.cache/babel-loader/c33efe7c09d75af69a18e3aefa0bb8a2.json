{"ast":null,"code":"var _jsxFileName = \"/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/contexts/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// Loading, to check whether a user exists or not\nimport React, { useContext, useEffect, useState } from 'react';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const registerUser = (email, password) => {\n    // Return a promise to be handled in the register module\n    return auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  const loginUser = (email, password) => {\n    return auth.signInWithEmailAndPassword(email, password);\n  };\n\n  const logoutUser = () => {\n    return auth.signOut();\n  }; // the create user function also calls the set user\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    registerUser,\n    loginUser,\n    logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(AuthProvider, \"1cdeWWSmbSz3cOWqWLAt+Ta4DMY=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/contexts/AuthContext.js"],"names":["React","useContext","useEffect","useState","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","registerUser","email","password","createUserWithEmailAndPassword","loginUser","signInWithEmailAndPassword","logoutUser","signOut","unsubscribe","onAuthStateChanged","user","value"],"mappings":";;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,aAArB;;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAkB;AAAA;;AACrB,SAAON,UAAU,CAACI,WAAD,CAAjB;AACH;;GAFeE,O;;AAIhB,OAAO,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAkC;AAAA;;AAErC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,EAA9C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;;AAGA,QAAMW,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtC;AACA,WAAOZ,IAAI,CAACa,8BAAL,CAAoCF,KAApC,EAA2CC,QAA3C,CAAP;AACH,GAHD;;AAKA,QAAME,SAAS,GAAG,CAACH,KAAD,EAAQC,QAAR,KAAqB;AACnC,WAAOZ,IAAI,CAACe,0BAAL,CAAgCJ,KAAhC,EAAuCC,QAAvC,CAAP;AACH,GAFD;;AAIA,QAAMI,UAAU,GAAG,MAAM;AACrB,WAAOhB,IAAI,CAACiB,OAAL,EAAP;AACH,GAFD,CAfqC,CAkBrC;;;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,WAAW,GAAIlB,IAAI,CAACmB,kBAAL,CAAyBC,IAAI,IAAI;AAClDb,MAAAA,cAAc,CAACa,IAAD,CAAd;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEP,KAJwB,CAArB;AAKJ,WAAOS,WAAP;AACC,GAPQ,EAON,EAPM,CAAT;AASA,QAAMG,KAAK,GAAG;AAAEf,IAAAA,WAAF;AAAeI,IAAAA,YAAf;AAA6BI,IAAAA,SAA7B;AAAwCE,IAAAA;AAAxC,GAAd;AAEA,sBAEI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,KAA7B;AAAA,cACM,CAACb,OAAD,IAAYH;AADlB;AAAA;AAAA;AAAA;AAAA,UAFJ;AAMH;;IArCeD,Y;;KAAAA,Y","sourcesContent":["// Loading, to check whether a user exists or not\n\nimport React, { useContext, useEffect, useState } from 'react'\nimport { auth } from '../firebase'\n\nconst AuthContext = React.createContext(); \n\nexport function useAuth(){\n    return useContext(AuthContext)\n}\n\nexport function AuthProvider({children}) {\n\n    const [currentUser, setCurrentUser] = useState();\n    const [loading, setLoading] = useState(true);\n\n\n    const registerUser = (email, password) => {\n        // Return a promise to be handled in the register module\n        return auth.createUserWithEmailAndPassword(email, password)\n    }\n\n    const loginUser = (email, password) => {\n        return auth.signInWithEmailAndPassword(email, password)\n    }\n\n    const logoutUser = () => {\n        return auth.signOut()\n    }\n    // the create user function also calls the set user\n\n    useEffect(() => {\n        const unsubscribe =  auth.onAuthStateChanged( user => {\n            setCurrentUser(user)\n            setLoading(false);\n\n    })\n    return unsubscribe;\n    }, [])\n\n    const value = { currentUser, registerUser, loginUser, logoutUser }\n\n    return (\n\n        <AuthContext.Provider value={value}>\n            { !loading && children}\n        </AuthContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}