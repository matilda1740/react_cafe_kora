{"ast":null,"code":"import { db } from './firebase';\nexport const initialState = {\n  products: []\n};\nexport const productReducer = (prevState = initialState, action) => {\n  const productsRef = db.collection('product');\n\n  switch (action.type) {\n    case \"update_product_info\":\n      let updateProducts = [...prevState.products];\n      return { ...prevState,\n        products: updateProducts\n      };\n\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n\n      try {\n        productsRef.where(\"product_id\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            productsRef.doc(item.id).delete();\n            let prodIndex = copyProducts.findIndex(product => product.product_id === item.data().product_id);\n\n            if (prodIndex >= 0) {\n              copyProducts.splice(prodIndex, 1);\n            }\n          });\n          console.log(copyProducts);\n        }).catch(error => console.log(error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: copyProducts\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.onSnapshot(snapshot => {\n          snapshot.docChanges().forEach(item => {\n            if (fetchedProducts.length === 0) {\n              fetchedProducts.push(item.doc.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.doc.data().product_id);\n\n              if (itemExists < 0) {\n                fetchedProducts.push(item.doc.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts\n      };\n\n    default:\n      return prevState;\n  }\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/reducers/productReducer.js"],"names":["db","initialState","products","productReducer","prevState","action","productsRef","collection","type","updateProducts","copyProducts","where","targetID","get","then","snapshot","forEach","item","doc","id","delete","prodIndex","findIndex","product","product_id","data","splice","console","log","catch","error","fetchedProducts","onSnapshot","docChanges","length","push","itemExists"],"mappings":"AACA,SAASA,EAAT,QAAmB,YAAnB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,QAAQ,EAAE;AADc,CAArB;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,SAAS,GAAGH,YAAb,EAA2BI,MAA3B,KAAsC;AAChE,QAAMC,WAAW,GAAGN,EAAE,CAACO,UAAH,CAAc,SAAd,CAApB;;AACA,UAAOF,MAAM,CAACG,IAAd;AAEI,SAAK,qBAAL;AACI,UAAIC,cAAc,GAAG,CAAC,GAAGL,SAAS,CAACF,QAAd,CAArB;AACA,aAAO,EACH,GAAGE,SADA;AAEHF,QAAAA,QAAQ,EAAEO;AAFP,OAAP;;AAIJ,SAAK,gBAAL;AACI,UAAIC,YAAY,GAAI,CAAC,GAAGN,SAAS,CAACF,QAAd,CAApB;;AACA,UAAG;AACCI,QAAAA,WAAW,CACNK,KADL,CACW,YADX,EACyB,IADzB,EACgC,GAAEN,MAAM,CAACO,QAAS,EADlD,EAEKC,GAFL,GAGKC,IAHL,CAGWC,QAAQ,IAAI;AACfA,UAAAA,QAAQ,CAACC,OAAT,CAAkBC,IAAI,IAAI;AACtBX,YAAAA,WAAW,CAACY,GAAZ,CAAgBD,IAAI,CAACE,EAArB,EAAyBC,MAAzB;AACA,gBAAIC,SAAS,GAAGX,YAAY,CAACY,SAAb,CAAwBC,OAAO,IAAIA,OAAO,CAACC,UAAR,KAAsBP,IAAI,CAACQ,IAAL,GAAYD,UAArE,CAAhB;;AACA,gBAAIH,SAAS,IAAI,CAAjB,EAAoB;AACjBX,cAAAA,YAAY,CAACgB,MAAb,CAAoBL,SAApB,EAA+B,CAA/B;AACF;AACJ,WAND;AAOAM,UAAAA,OAAO,CAACC,GAAR,CAAYlB,YAAZ;AACH,SAZL,EAYOmB,KAZP,CAYcC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAZvB;AAeH,OAhBD,CAgBC,OAAMA,KAAN,EAAY;AACTH,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,KAAhC;AACH;;AACD,aAAO,EACH,GAAG1B,SADA;AAEHF,QAAAA,QAAQ,EAAEQ;AAFP,OAAP;;AAIJ,SAAK,gBAAL;AACI,UAAIqB,eAAe,GAAG,CAAC,GAAG3B,SAAS,CAACF,QAAd,CAAtB;;AACA,UAAG;AACCI,QAAAA,WAAW,CACV0B,UADD,CACajB,QAAD,IAAc;AACtBA,UAAAA,QAAQ,CAACkB,UAAT,GAAsBjB,OAAtB,CAA+BC,IAAI,IAAI;AACnC,gBAAGc,eAAe,CAACG,MAAhB,KAA2B,CAA9B,EAAgC;AAC5BH,cAAAA,eAAe,CAACI,IAAhB,CAAqBlB,IAAI,CAACC,GAAL,CAASO,IAAT,EAArB;AACH,aAFD,MAEK;AACD,kBAAIW,UAAU,GAAGL,eAAe,CAACT,SAAhB,CAA2BC,OAAO,IAAIA,OAAO,CAACC,UAAR,KAAuBP,IAAI,CAACC,GAAL,CAASO,IAAT,GAAgBD,UAA7E,CAAjB;;AAEA,kBAAGY,UAAU,GAAG,CAAhB,EAAkB;AACdL,gBAAAA,eAAe,CAACI,IAAhB,CAAqBlB,IAAI,CAACC,GAAL,CAASO,IAAT,EAArB;AACH;AACJ;AACJ,WAVD;AAWH,SAbD;AAcH,OAfD,CAeC,OAAMK,KAAN,EAAY;AACTH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH;;AACD,aAAM,EACF,GAAG1B,SADD;AAEFF,QAAAA,QAAQ,EAAE6B;AAFR,OAAN;;AAIJ;AACI,aAAO3B,SAAP;AA1DR;AA4DH,CA9DM","sourcesContent":["\nimport { db } from './firebase'\n\nexport const initialState = {\n    products: []\n};\n\n\nexport const productReducer = (prevState = initialState, action) => {\n    const productsRef = db.collection('product')\n    switch(action.type) {\n\n        case \"update_product_info\":\n            let updateProducts = [...prevState.products]\n            return {\n                ...prevState, \n                products: updateProducts  \n            }\n        case \"delete_product\":\n            let copyProducts =  [...prevState.products];\n            try{ \n                productsRef\n                    .where(\"product_id\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            productsRef.doc(item.id).delete() \n                            let prodIndex = copyProducts.findIndex( product => product.product_id ===item.data().product_id)  \n                            if (prodIndex >= 0) {\n                               copyProducts.splice(prodIndex, 1);\n                            }                           \n                        })\n                        console.log(copyProducts)\n                    }).catch( error => console.log(error))\n                    \n                    \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: copyProducts              \n            }\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docChanges().forEach( item => {\n                        if(fetchedProducts.length === 0){\n                            fetchedProducts.push(item.doc.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.doc.data().product_id)\n\n                            if(itemExists < 0){\n                                fetchedProducts.push(item.doc.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n            }\n        default: \n            return prevState;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}