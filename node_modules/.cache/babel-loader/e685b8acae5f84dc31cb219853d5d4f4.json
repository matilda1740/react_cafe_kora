{"ast":null,"code":"import { db } from './firebase';\nexport const initialState = {\n  users: [],\n  products: []\n};\nexport const reducer = (prevState = initialState, action) => {\n  const customersRef = db.collection('user');\n  const productsRef = db.collection('product');\n\n  switch (action.type) {\n    case \"delete_product\":\n      let copyProducts = [...prevState.products];\n      console.log(action);\n\n      try {\n        customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n          snapshot.forEach(item => {\n            // productsRef.doc(item.id).delete() \n            console.log(productsRef.doc(item.id));\n          });\n        }).then(() => {\n          let prodIndex = copyProducts.findIndex(product => product.product_id === action.targetID);\n\n          if (prodIndex >= 0) {\n            return copyProducts.splice(prodIndex, 1);\n          }\n        }).catch(error => console.log(\"Deletion Error: \", error));\n      } catch (error) {\n        console.log(\"Deletion Error: \", error);\n      }\n\n      return { ...prevState,\n        products: [...copyProducts]\n      };\n\n    case \"fetch_products\":\n      let fetchedProducts = [...prevState.products];\n\n      try {\n        productsRef.onSnapshot(snapshot => {\n          snapshot.docs.forEach(item => {\n            // fetchedProducts = [...prevState.products]\n            if ((fetchedProducts === null || fetchedProducts === void 0 ? void 0 : fetchedProducts.length) === 0) {\n              return fetchedProducts.push(item.data());\n            } else {\n              let itemExists = fetchedProducts.findIndex(product => product.product_id === item.data().product_id);\n\n              if (itemExists < 0) {\n                return fetchedProducts.push(item.data());\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      return { ...prevState,\n        products: fetchedProducts // products: [...fetchedProducts],\n\n      };\n\n    case \"fetch_user_details\":\n      let copyUsers = [...prevState.users];\n      let selectedUser;\n      customersRef.where(\"userID\", \"==\", `${action.targetID}`).get().then(snapshot => {\n        snapshot.forEach(user => {\n          selectedUser = user.data();\n          return selectedUser;\n        });\n      }).catch(error => console.log(\"Update Error: \", error));\n      console.log(action, selectedUser);\n      return { ...prevState,\n        users: copyUsers\n      };\n\n    default:\n      return prevState;\n  } // return prevState;\n\n};","map":{"version":3,"sources":["/Users/matildamwendwa/Documents/Strathmore/Year 2/Web Application Dev/react_semester_project/src/components/reducer.js"],"names":["db","initialState","users","products","reducer","prevState","action","customersRef","collection","productsRef","type","copyProducts","console","log","where","targetID","get","then","snapshot","forEach","item","doc","id","prodIndex","findIndex","product","product_id","splice","catch","error","fetchedProducts","onSnapshot","docs","length","push","data","itemExists","copyUsers","selectedUser","user"],"mappings":"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","sourcesContent":["\nimport { db } from './firebase'\n\nexport const initialState = {\n    users: [],\n    products: []\n\n};\n\n\nexport const reducer = (prevState = initialState, action) => {\n    const customersRef = db.collection('user')\n    const productsRef = db.collection('product')\n\n    switch(action.type) {\n\n        case \"delete_product\" :\n            let copyProducts =  [...prevState.products];\n            console.log(action)\n            try{ \n                customersRef\n                    .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( item => {\n                            // productsRef.doc(item.id).delete() \n                            console.log(productsRef.doc(item.id))\n                        })\n                    })\n                    .then( () => {\n                        let prodIndex = copyProducts.findIndex( product => product.product_id === action.targetID)                     \n                        if (prodIndex >= 0) {\n                            return copyProducts.splice(prodIndex, 1);\n                        } \n                    })\n                    .catch(error => console.log(\"Deletion Error: \", error))   \n                    \n                    \n            }catch(error){\n                console.log(\"Deletion Error: \", error)\n            }            \n            return {\n                ...prevState, \n                products: [...copyProducts]                \n            }\n        case \"fetch_products\":\n            let fetchedProducts = [...prevState.products];\n            try{\n                productsRef \n                .onSnapshot((snapshot) => {\n                    snapshot.docs.forEach( item => {\n                        // fetchedProducts = [...prevState.products]\n                        if(fetchedProducts?.length === 0){\n                            return fetchedProducts.push(item.data())\n                        }else{\n                            let itemExists = fetchedProducts.findIndex( product => product.product_id === item.data().product_id)\n\n                            if(itemExists < 0){\n                                return fetchedProducts.push(item.data())\n                            }\n                        }\n                    })\n                })\n            }catch(error){\n                console.log(error)\n            }\n            return{\n                ...prevState, \n                products: fetchedProducts,\n                // products: [...fetchedProducts],\n            }\n\n        case \"fetch_user_details\":\n            let copyUsers = [...prevState.users]\n\n            let selectedUser;\n            customersRef\n                .where(\"userID\", \"==\", `${action.targetID}`)\n                    .get()\n                    .then( snapshot => {\n                        snapshot.forEach( user => {\n                            selectedUser = user.data()\n                            return selectedUser\n                        })\n                    })\n                    .catch( (error) => console.log(\"Update Error: \", error))\n            console.log(action, selectedUser)\n            return{\n                ...prevState,\n                users: copyUsers,\n            }\n\n\n        default: \n            return prevState;\n    }\n            // return prevState;\n\n}\n\n"]},"metadata":{},"sourceType":"module"}